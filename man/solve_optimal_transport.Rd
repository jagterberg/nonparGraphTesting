% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimal_transport.R
\name{solve_optimal_transport}
\alias{solve_optimal_transport}
\title{Function to iterate over a decreasing sequence of lambdas, the penalization parameters.
If lambda is big, the function is more concave, so we iterate, starting
from Lambda = .5, and decreasing each time by alpha.
This method takes longer, but is more likely to converge to the true solution,
since we start from a more concave problem and iteratively solve it by setting
lambda = alpha * lambda, for alpha \in (0,1).}
\usage{
solve_optimal_transport(X, Y, Q = NULL, lambda_init = 0.5,
  lambda_final = 1e-04, alpha = 0.95, eps = 0.01, numReps = 100)
}
\arguments{
\item{X}{an n x d dataset of vectors}

\item{Y}{an m x d dataset of vectors}

\item{Q}{an initial guess}

\item{lambda_init}{the initial value of lambda for penalization}

\item{lambda_final}{For termination}

\item{alpha}{the parameter for which lambda is multiplied by}

\item{eps}{the tolerance for the optimal transport problem}

\item{numReps}{the number of reps for each subiteration}
}
\value{
a list of the final orthogonal matrix and the assignment matrix
}
\description{
Function to iterate over a decreasing sequence of lambdas, the penalization parameters.
If lambda is big, the function is more concave, so we iterate, starting
from Lambda = .5, and decreasing each time by alpha.
This method takes longer, but is more likely to converge to the true solution,
since we start from a more concave problem and iteratively solve it by setting
lambda = alpha * lambda, for alpha \in (0,1).
}
\examples{
library(rstiefel)
set.seed(2019)
X <- matrix(rnorm(1000,1,.2),ncol= 4)
Y <- rbind(X,X)
W <- rustiefel(4,4)
Y <- Y \%*\% W
test <- solve_optimal_transport(X,Y)
norm(test$`Orthogonal Matrix` - W,"2")

X <- matrix(rnorm(1000,.2,.02),ncol= 5)
Y <- rbind(X,X)
W <- rustiefel(5,5)
Y <- Y \%*\% W
test2 <- solve_optimal_transport(X,Y)
norm(test2$`Orthogonal Matrix` - W,"2")
}
